name: Rust

on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - identifier: linux-debug
            name: Linux Debug
            runner: ubuntu-latest
            target: debug
            platform: linux
            arch: x86_64
          - identifier: linux-release
            name: Linux Release
            runner: ubuntu-latest
            target: release
            platform: linux
            arch: x86_64
          - identifier: windows-debug
            name: Windows Debug
            runner: windows-latest
            target: debug
            platform: windows
            arch: x86_64
          - identifier: windows-release
            name: Windows Release
            runner: windows-latest
            target: release
            platform: windows
            arch: x86_64
          - identifier: macos-debug
            name: macOS Debug
            runner: macos-latest
            target: debug
            platform: macos
            arch: arm64
          - identifier: macos-release
            name: macOS Release
            runner: macos-latest
            target: release
            platform: macos
            arch: arm64

    runs-on: ${{ matrix.runner }}

    steps:
      - uses: actions/checkout@v4
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64
        if: matrix.platform == 'windows'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.platform }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build (Debug)
        if: ${{ startsWith(matrix.target, 'debug') }}
        run: cargo build --verbose
      - name: Build (Release)
        if: ${{ startsWith(matrix.target, 'release') }}
        run: cargo build --release --verbose
      - name: Archive Artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: lib-${{ matrix.platform }}-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/*.dll
            target/${{ matrix.target }}/*.dylib
            target/${{ matrix.target }}/*.so

  package:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: lib-*

      - name: Package Artifacts
        run: |
          find . -type f \( -name '*.so' -o -name '*.dll' -o -name '*.dylib' \) -exec bash -c 'path=$(echo $0 | sed s/-/\\//g); mkdir -p ${path%/*}; mv $0 $_' {} \;
          mkdir -p project/addons/gd-spout
          mv ./lib ./project/addons/gd-spout
          cp LICENSE ./project/addons/gd-spout

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}
          path: |
            ${{ github.workspace }}/project/